---
import BaseLayout from '@layouts/BaseLayout.astro';
import Section from '@components/Section.astro';
import { getCollection } from 'astro:content';
import { marked } from 'marked';

export async function getStaticPaths() {
  const entries = await getCollection('projects');
  return entries.map((e) => ({ params: { slug: e.slug }, props: { entry: e } }));
}

const { entry } = Astro.props;

// Pre-render the page body once, for the final fallback
const { Content: BodyContent } = await entry.render();

// Helper: render markdown to HTML (used for paragraph blocks and longDetails)
const renderMD = (md?: string) => (md ? marked.parse(md) : '');
---

<BaseLayout title={`${entry.data.title} â€” SPARQ Projects`}>
  <Section
    title={entry.data.title}
    subtitle={entry.data.completed ? `Completed: ${entry.data.completed}` : undefined}
  >
    {entry.data.heroImage && (
      <img src={entry.data.heroImage} alt="" class="mb-6 rounded-xl border" />
    )}

    <div class="prose max-w-none">
      {
        entry.data.content && entry.data.content.length > 0
          ? entry.data.content.map((block: any) => (
              (() => {
                switch (block.type) {
                  case 'header': {
                    if (block.level === 'h3') return <h3>{block.text}</h3>;
                    if (block.level === 'h4') return <h4>{block.text}</h4>;
                    return <h2>{block.text}</h2>;
                  }
                  case 'subheader': {
                    if (block.level === 'h4') return <h4>{block.text}</h4>;
                    return <h3>{block.text}</h3>;
                  }
                  case 'paragraph': {
                    return <div set:html={renderMD(block.body)} />;
                  }
                  case 'list': {
                    const items = (block.items ?? []).map((it: string) => <li>{it}</li>);
                    return block.style === 'ol'
                      ? <ol class="list-decimal pl-6">{items}</ol>
                      : <ul class="list-disc pl-6">{items}</ul>;
                  }
                  case 'link': {
                    return (
                      <p><a class="text-blue-700" href={block.url}>{block.label}</a></p>
                    );
                  }
                  case 'file': {
                    return (
                      <p><a class="text-blue-700" href={block.file} download>{block.label}</a></p>
                    );
                  }
                  default:
                    return null;
                }
              })()
            ))
          : (
            // Fallbacks: prefer longDetails (markdown), else the page body
            entry.data.longDetails
              ? <div set:html={renderMD(entry.data.longDetails)} />
              : <BodyContent />
          )
      }
    </div>

    {entry.data.links?.length > 0 && (
      <div class="mt-8">
        <h3 class="font-semibold mb-2">Related links</h3>
        <ul class="list-disc pl-5">
          {entry.data.links.map((l: any) => (
            <li><a class="text-blue-700" href={l.url}>{l.label}</a></li>
          ))}
        </ul>
      </div>
    )}

    {entry.data.files?.length > 0 && (
      <div class="mt-8">
        <h3 class="font-semibold mb-2">Downloads</h3>
        <ul class="list-disc pl-5">
          {entry.data.files.map((f: any) => (
            <li><a class="text-blue-700" href={f.file} download>{f.label}</a></li>
          ))}
        </ul>
      </div>
    )}
  </Section>
</BaseLayout>
