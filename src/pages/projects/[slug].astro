---
import BaseLayout from '@layouts/BaseLayout.astro';
import Section from '@components/Section.astro';
import { getCollection } from 'astro:content';
import { marked } from 'marked';

export async function getStaticPaths() {
  const entries = await getCollection('projects');
  return entries.map((e) => ({ params: { slug: e.slug }, props: { entry: e } }));
}

const { entry } = Astro.props;
const { Content: BodyContent } = await entry.render();

const renderMD = (md?: string) => (md ? marked.parse(md) : '');

const heroUrl        = entry.data.heroImage as string | undefined;
const heroAlt        = (entry.data.heroAlt as string | undefined) ?? '';
const heroLayout     = (entry.data.heroLayout as string | undefined) ?? 'full';
const heroFocal      = (entry.data.heroFocal as string | undefined) ?? 'center';
const heroCaption    = entry.data.heroCaption as string | undefined;
const heroCredit     = entry.data.heroCredit as string | undefined;
const heroCreditUrl  = entry.data.heroCreditUrl as string | undefined;

const objectPosition = (f: string) => {
  switch (f) {
    case 'top': return 'center top';
    case 'bottom': return 'center bottom';
    case 'left': return 'left center';
    case 'right': return 'right center';
    case 'top-left': return 'left top';
    case 'top-right': return 'right top';
    case 'bottom-left': return 'left bottom';
    case 'bottom-right': return 'right bottom';
    default: return 'center';
  }
};

// Build style strings OUTSIDE of attribute expressions to avoid parser hiccups
const heroObjPosStyle = `object-position: ${objectPosition(heroFocal)};`;
const bannerAspectStyle = 'aspect-ratio: 21/9;';
const asideAspectStyle  = 'aspect-ratio: 3/4;';

const Blocks = (
  entry.data.content && entry.data.content.length > 0
    ? entry.data.content.map((block: any) => (
        (() => {
          switch (block.type) {
            case 'header':
              return block.level === 'h3' ? <h3>{block.text}</h3>
                   : block.level === 'h4' ? <h4>{block.text}</h4>
                   : <h2>{block.text}</h2>;
            case 'subheader':
              return block.level === 'h4' ? <h4>{block.text}</h4> : <h3>{block.text}</h3>;
            case 'paragraph':
              return <div set:html={renderMD(block.body)} />;
            case 'list': {
              const items = (block.items ?? []).map((it: string) => <li>{it}</li>);
              return block.style === 'ol'
                ? <ol class="list-decimal pl-6">{items}</ol>
                : <ul class="list-disc pl-6">{items}</ul>;
            }
            case 'link':
              return <p><a class="text-blue-700" href={block.url}>{block.label}</a></p>;
            case 'file':
              return <p><a class="text-blue-700" href={block.file} download>{block.label}</a></p>;
            default:
              return null;
          }
        })()
      ))
    : (entry.data.longDetails
        ? <div set:html={renderMD(entry.data.longDetails)} />
        : <BodyContent />)
);
---

{/* BANNER layout (image above title) */}
{heroUrl && heroLayout === 'banner' && (
  <div class="w-full mb-8">
    <div class="relative w-full overflow-hidden border rounded-xl" style={bannerAspectStyle}>
      <img
        src={heroUrl}
        alt={heroAlt}
        class="h-full w-full object-cover"
        style={heroObjPosStyle}
      />
      <div class="absolute inset-x-0 bottom-0 h-16 bg-gradient-to-t from-black/20 to-transparent"></div>
    </div>
    {(heroCaption || heroCredit) && (
      <p class="mt-2 text-sm text-gray-500">
        {heroCaption}
        {heroCredit && (
          <span>
            {' '}— Photo:{' '}
            {heroCreditUrl ? <a class="underline" href={heroCreditUrl}>{heroCredit}</a> : heroCredit}
          </span>
        )}
      </p>
    )}
  </div>
)}

<BaseLayout title={`${entry.data.title} — SPARQ Projects`}>
  {/* ASIDE layout (portrait image to the right on large screens) */}
  {heroUrl && heroLayout === 'aside' ? (
    <Section>
      <div class="lg:grid lg:grid-cols-12 lg:gap-8">
        <div class="lg:col-span-8">
          <h1 class="text-3xl font-semibold tracking-tight mb-2">{entry.data.title}</h1>
          {entry.data.completed && <p class="text-gray-500 mb-6">Completed: {entry.data.completed}</p>}
          <div class="prose max-w-none">
            {Blocks}
          </div>
          {entry.data.links?.length > 0 && (
            <div class="mt-8">
              <h3 class="font-semibold mb-2">Related links</h3>
              <ul class="list-disc pl-5">
                {entry.data.links.map((l: any) => (
                  <li><a class="text-blue-700" href={l.url}>{l.label}</a></li>
                ))}
              </ul>
            </div>
          )}
          {entry.data.files?.length > 0 && (
            <div class="mt-8">
              <h3 class="font-semibold mb-2">Downloads</h3>
              <ul class="list-disc pl-5">
                {entry.data.files.map((f: any) => (
                  <li><a class="text-blue-700" href={f.file} download>{f.label}</a></li>
                ))}
              </ul>
            </div>
          )}
        </div>
        <aside class="lg:col-span-4 mt-6 lg:mt-0">
          <div class="lg:sticky lg:top-24">
            <div class="overflow-hidden border rounded-xl" style={asideAspectStyle}>
              <img
                src={heroUrl}
                alt={heroAlt}
                class="h-full w-full object-cover"
                style={heroObjPosStyle}
              />
            </div>
            {(heroCaption || heroCredit) && (
              <p class="mt-2 text-sm text-gray-500">
                {heroCaption}
                {heroCredit && (
                  <span>
                    {' '}— Photo:{' '}
                    {heroCreditUrl ? <a class="underline" href={heroCreditUrl}>{heroCredit}</a> : heroCredit}
                  </span>
                )}
              </p>
            )}
          </div>
        </aside>
      </div>
    </Section>
  ) : (
    // FULL or NONE (default Section heading block)
    <Section
      title={entry.data.title}
      subtitle={entry.data.completed ? `Completed: ${entry.data.completed}` : undefined}
    >
      {/* FULL layout: large image under title */}
      {heroUrl && heroLayout === 'full' && (
        <>
          <img src={heroUrl} alt={heroAlt} class="mb-6 rounded-xl border w-full h-auto" />
          {(heroCaption || heroCredit) && (
            <p class="mt-[-0.5rem] mb-4 text-sm text-gray-500">
              {heroCaption}
              {heroCredit && (
                <span>
                  {' '}— Photo:{' '}
                  {heroCreditUrl ? <a class="underline" href={heroCreditUrl}>{heroCredit}</a> : heroCredit}
                </span>
              )}
            </p>
          )}
        </>
      )}

      <div class="prose max-w-none">
        {Blocks}
      </div>

      {entry.data.links?.length > 0 && (
        <div class="mt-8">
          <h3 class="font-semibold mb-2">Related links</h3>
          <ul class="list-disc pl-5">
            {entry.data.links.map((l: any) => (
              <li><a class="text-blue-700" href={l.url}>{l.label}</a></li>
            ))}
          </ul>
        </div>
      )}

      {entry.data.files?.length > 0 && (
        <div class="mt-8">
          <h3 class="font-semibold mb-2">Downloads</h3>
          <ul class="list-disc pl-5">
            {entry.data.files.map((f: any) => (
              <li><a class="text-blue-700" href={f.file} download>{f.label}</a></li>
            ))}
          </ul>
        </div>
      )}
    </Section>
  )}
</BaseLayout>
