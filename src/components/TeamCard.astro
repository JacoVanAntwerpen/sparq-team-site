---
const { person } = Astro.props as { person: any };
const data = person.data ?? {};
const displayName = [data.prefix, data.name].filter(Boolean).join(' ').trim();
const role = data.role ?? data.title ?? '';
const photo = data.photo ?? '/uploads/avatar-placeholder.png';
---
<a href={`/team/${person.slug}`} class="block rounded-2xl border border-neutral-200 bg-white p-6 shadow-sm hover:shadow-md transition-shadow">
  <div class="flex flex-col items-center text-center">
    <img
      src={photo}
      alt={displayName}
      class="h-28 w-28 rounded-full object-cover"
      loading="lazy"
    />
    <h3 class="mt-4 font-semibold">{displayName}</h3>
    {role && <p class="mt-1 text-sm text-neutral-600">{role}</p>}
  </div>
</a>


// File: src/components/TeamGrid.astro
---
// Centralized grid that renders TeamCard for all members.
// Props (all optional):
// - people: pre-fetched array of team entries from getCollection('team')
// - limit: number to limit how many entries are shown (useful for homepage)
// - class: extra classes for the wrapper
import TeamCard from './TeamCard.astro';
import { getCollection } from 'astro:content';

interface Props {
  people?: any[];
  limit?: number;
  class?: string;
}

const { people, limit, class: extraClass } = Astro.props as Props;

let teamEntries = people;
if (!teamEntries) {
  teamEntries = await getCollection('team');
}

// Sort by optional `order` field; fallback to name
teamEntries = [...teamEntries].sort((a, b) => {
  const ao = a.data.order ?? 9999;
  const bo = b.data.order ?? 9999;
  if (ao !== bo) return ao - bo;
  return (a.data.name ?? '').localeCompare(b.data.name ?? '');
});

if (typeof limit === 'number') {
  teamEntries = teamEntries.slice(0, Math.max(0, limit));
}
---
<div class={`grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 ${extraClass ?? ''}`}>
  {teamEntries.map((person) => <TeamCard person={person} />)}
</div>
